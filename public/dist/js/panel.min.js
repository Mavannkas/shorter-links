const button=document.querySelector(".main__button"),input=document.querySelector(".main__input"),inputCustom=document.querySelector("#custom-url"),error=document.querySelector(".main__error"),linkTable=document.querySelector("#links");function main(){addListeners(),genChart(),genTable()}function addListeners(){prepareShortenFormListeners(),prepareTableListeners()}function prepareShortenFormListeners(){button.addEventListener("click",getShortenLink),input.addEventListener("keypress",getShortenLink),input.addEventListener("paste",getShortenLink)}function prepareTableListeners(){linkTable.addEventListener("click",copyLink)}async function getShortenLink(t){if("Wait..."!==button.innerText)if("Copy"!==button.innerText||"click"!==t.type){if(clear(),("keypress"!==t.type||"Enter"===t.key)&&"paste"!==t.type){var e=input.value,t=inputCustom.value;input.value="",inputCustom.value="";try{check(e,t),setLoading(),setSuccess(await sendUrl(e,t))}catch(t){setError(t)}}}else copyValue(input.value,button)}function clear(){error.innerText="",removeButtonBlinking("Shorten")}function removeButtonBlinking(t){button.firstElementChild.innerText=t,button.classList.remove("main__button--waiter")}function check(t,e){if(!t)throw"You must enter link!";if(e&&e.length<3)throw"Custom url must have at least 3 chars"}function setLoading(){button.firstElementChild.innerText="Wait...",button.classList.add("main__button--waiter")}async function sendUrl(t,e){return sendPost("main/shorten",getInputObject(t,e))}function getInputObject(t,e){const n={source:t};return e&&(n.customID=e),n}function setSuccess({redirectLink:t,source:e}){removeButtonBlinking("Copy"),addNewRow(input.value=t,e,!0)}function setError(t){removeButtonBlinking("Error"),error.innerText="string"==typeof t?t:t.join(". ")}async function genChart(){var t=document.getElementById("myChart"),e={labels:getLastSevenDays(),datasets:[{label:"Redirect Usage stats",data:await getLastDaysStats(),backgroundColor:["#fb930042","rgba(255, 159, 64, 0.2)","rgba(255, 205, 86, 0.2)","rgba(75, 192, 192, 0.2)","rgba(54, 162, 235, 0.2)","rgba(153, 102, 255, 0.2)","rgba(201, 203, 207, 0.2)"],borderColor:["#fb9300","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(54, 162, 235)","rgb(153, 102, 255)","rgb(201, 203, 207)"],tension:.1,borderWidth:1}]};setUpdateChart(new Chart(t,{type:"bar",data:e}))}function getLastSevenDays(){const e=[];for(let t=6;0<=t;t--)e.push(new Date(Date.now()-864e5*t).toLocaleDateString("en-En",{weekday:"short"}));return e}function setUpdateChart(t){setInterval(async()=>{t.data.datasets[0].data=await getLastDaysStats(),t.update()},15e3)}async function getLastDaysStats(){try{const t=await sendGet("main/stats/last/days/7");return refillJson(t.reverse())}catch(t){return[]}}function refillJson(t){const e=getDays();return t.forEach(t=>{e[t.day]=t.redirectCount}),Object.values(e)}function getDays(){const e={};for(let t=6;0<=t;t--){var n=new Date(new Date(Date.now()-864e5*t).toLocaleDateString("en")).toISOString();e[n]=0}return e}function copyLink({target:t}){var e;"BUTTON"===t.nodeName&&(e=t.parentElement.firstElementChild.innerText,copyValue(e,t))}async function genTable(){try{const{items:t}=await sendGet("main/shorten/pages/1/5");t.reverse().forEach(({redirectLink:t,source:e})=>addNewRow(t,e))}catch(t){}}function addNewRow(t,e,n=!1){putRowInTable(getRow(t,e),n)}function getRow(t,e){const n=document.createElement("tr");return n.classList.add("table__row"),n.innerHTML=`<td class="table__cell">${e}</td>
  <td class="table__cell"><a class="link" href="${t}" target="_blank" >${t}</a><button class="button copy">Copy</button></td>
  `,n}function putRowInTable(t,e=!1){const n=linkTable.querySelector(".table__body");n.prepend(t),e&&n.lastElementChild.remove()}main();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
